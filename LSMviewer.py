# -*- coding: utf-8 -*-
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets, QtWebSockets, QtNetwork
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, \
    QPushButton, QVBoxLayout, QFileDialog, QMessageBox, QProgressBar
from PyQt5.QtGui import *

import ntpath
import os
import numpy as np
import nibabel as nib
from openpyxl import Workbook
import xlsxwriter
from globals import *
from scores import *


# class for scrollable label
class ScrollLabel(QtWidgets.QScrollArea):
    
    # constructor
    def __init__(self, *args, **kwargs):
        QtWidgets.QScrollArea.__init__(self, *args, **kwargs)

        self.setWidgetResizable(True) 
        content = QtWidgets.QWidget(self)
        self.setWidget(content) 
        lay = QVBoxLayout(content)
        self.label = QtWidgets.QLabel(content) 
        self.label.setWordWrap(True)
        lay.addWidget(self.label)
 
    # the setText method
    def setText(self, text):
        self.label.setText(text)
    
    def text(self):
        return self.label.text()


class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1124, 930)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.checkbox_lis = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_lis.setGeometry(QtCore.QRect(300, 120, 170, 41))
        self.checkbox_lis.setObjectName("checkbox_lis")
        self.checkbox_nis = QtWidgets.QCheckBox(self.centralwidget)
        self.checkbox_nis.setGeometry(QtCore.QRect(300, 150, 170, 41))
        self.checkbox_nis.setObjectName("checkbox_nis")
        self.button_calculate_scores = QtWidgets.QPushButton(self.centralwidget)
        self.button_calculate_scores.setGeometry(QtCore.QRect(500, 140, 121, 31))
        self.button_calculate_scores.setObjectName("button_calculate_scores")
        self.results = ScrollLabel(self.centralwidget)
        self.results.setGeometry(QtCore.QRect(290, 190, 800, 270))
        self.results.setText("")
        self.results.setObjectName("results")
        self.table = ScrollLabel(self.centralwidget)
        self.table.setGeometry(QtCore.QRect(290, 550, 800, 260))
        self.table.setText("")
        self.table.setObjectName("table")
        self.button_open_file = QtWidgets.QPushButton(self.centralwidget)
        self.button_open_file.setGeometry(QtCore.QRect(20, 140, 121, 31))
        self.button_open_file.setObjectName("button_open_file")
        self.label_filename = ScrollLabel(self.centralwidget)
        self.label_filename.setGeometry(QtCore.QRect(20, 190, 221, 270))
        self.label_filename.setText("")
        self.label_filename.setObjectName("label_filename")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(30, 10, 1124, 91))
        self.title.setObjectName("risk_scores")
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(890, 10, 91, 41))
        self.image.setObjectName("logo")        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1124, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        
        self.progress = QProgressBar(self.centralwidget)
        self.progress.setGeometry(30, 500, 200, 20)
        self.progress.hide()   
        
        self.label_design = QtWidgets.QLabel(self.centralwidget)
        self.label_design.setGeometry(QtCore.QRect(600, 830, 490, 100))
        self.label_design.setText("developed by Maria Leousi,\n"\
                               +"on behalf of the Meta VCI Map consortium")
        self.label_design.setObjectName("label_design")
        self.label_design.setWordWrap(True)
        self.label_design.setAlignment(QtCore.Qt.AlignRight)
        
        self.label_metavci = QtWidgets.QLabel(self.centralwidget)
        self.label_metavci.setGeometry(QtCore.QRect(890, 120, 200, 60))        
        self.label_metavci.setObjectName("label_metavci")
        self.label_metavci.setWordWrap(True)
        self.label_metavci.setAlignment(QtCore.Qt.AlignRight)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "LSMviewer"))
        self.checkbox_lis.setText(_translate("MainWindow", "Location Impact Score"))
        self.checkbox_nis.setText(_translate("MainWindow", "Network Impact Score"))
        self.button_calculate_scores.setText(_translate("MainWindow", "Calculate"))
        self.button_open_file.setText(_translate("MainWindow", "Select files..."))
        
        fontSize = 8
        fontStyle = 'Quattrocento Sans'
        self.title.setText(_translate("MainWindow", "Risk scores calculation"))
        self.title.setStyleSheet("QLabel {color: blue; }")
        self.title.setFont(QFont(fontStyle, 17))  
        
        
        self.label_filename.setFont(QFont(fontStyle, fontSize))
        self.label_filename.setStyleSheet("QLabel { background-color: white; }")
        self.label_filename.setAlignment(QtCore.Qt.AlignCenter)
        self.results.setFont(QFont(fontStyle, fontSize))
        self.results.setStyleSheet("QLabel { background-color: white; }")
        self.table.setFont(QFont(fontStyle, 8))
        self.table.setStyleSheet("QLabel { background-color: white; }")
        self.table.setAlignment(QtCore.Qt.AlignCenter)
        self.checkbox_lis.setFont(QFont(fontStyle, fontSize))
        self.checkbox_nis.setFont(QFont(fontStyle, fontSize))
        self.button_calculate_scores.setFont(QFont(fontStyle, fontSize))
        self.button_calculate_scores.setStyleSheet("QPushButton  { border-bottom: 10px solid {shadow} }")
        self.button_open_file.setFont(QFont(fontStyle, fontSize))
        self.image.setStyleSheet("QLabel { background-color: white; }")
        self.pixmap = QtGui.QPixmap('umc_logo.jpg') 
        self.image.setPixmap(self.pixmap)
        self.image.resize(self.pixmap.width(), self.pixmap.height())
        
        urlLink="<a href=\"https://metavcimap.org/\">Meta VCI Map</a>" 
        self.label_metavci.setOpenExternalLinks(True)
        self.label_metavci.setText(urlLink)
        
        self.label_design.setFont(QFont(fontStyle, 7))
        self.label_metavci.setFont(QFont(fontStyle, 10))
        
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))      
        
        
        """browse file"""
        self.button_open_file.clicked.connect(self.select_files)
        """calculate scores"""
        self.button_calculate_scores.clicked.connect(self.calculate_scores)
        
        
        
    def select_files(self):       
        self.results.setText("")
        self.table.setText("")
        
        globals.lis = self.checkbox_lis.isChecked()
        globals.nis = self.checkbox_nis.isChecked()       
        
        
        """select infarct files"""
        path = QFileDialog.getOpenFileNames()   
        names = ""
        files = []
        filesStr = ""
        if path != ('', ''):
            for i in range(0, len(path[0])):                
                print("File path : "+ path[0][i])
                head, name = ntpath.split(path[0][i])                
                names += "\n" + name                
                files.append(path[0][i])
                filesStr += "\n" + path[0][i]            
            self.label_filename.setText(filesStr)
                       
            getFilenames = self.label_filename.text()
            globals.getFilenamesList = list(getFilenames.split("\n"))        
            globals.getFilenamesList.remove("")       
            self.label_filename.setText(names)
            
            self.progress.show()
            self.handle_progress(i=0, size=0)
            
            '''load image data'''
            globals.images_array_data = []
            listSize = len(globals.getFilenamesList)
            i = 0
            checked_names = []
            names = ""
            while i < listSize:
                uploaded_file = nib.load(globals.getFilenamesList[i])
                uploaded_data = uploaded_file.get_fdata()
                
                head, currentFile = ntpath.split(globals.getFilenamesList[i])
                
                if ~((uploaded_data==0) | (uploaded_data==1)).all() :
                    self.warning_message(0, globals.nis, globals.lis, fileName=files[i], binary=False)
                    globals.getFilenamesList.remove(globals.getFilenamesList[i])
                    files.remove(files[i])
                    listSize = len(globals.getFilenamesList)

                else:
                    globals.images_array_data.append(uploaded_data)
                    checked_names.append(currentFile)
                    names += "\n" + currentFile
                    i+=1
                    
            self.label_filename.setText(names)
            
            print(len(globals.images_array_data))            
            
            '''no files selected'''
            if len(globals.getFilenamesList)==0:
                self.warning_message(0, globals.nis, globals.lis)

        
    
        
    def calculate_scores(self):
        self.results.setText("")
        self.table.setText("")
        
        isFinished = False
        
        '''check if files are selected'''
        try:
            globals.getFilenamesList
        except:
            '''no files selected'''
            self.warning_message(0, nis=0, lis=0)
        else:            
            '''calculate scores'''       
            globals.lis = self.checkbox_lis.isChecked()
            globals.nis = self.checkbox_nis.isChecked() 
            array = globals.getFilenamesList
                    
            print(globals.lis, globals.nis)
            if globals.nis == False and globals.lis == False:
                self.warning_message(len(array), globals.nis, globals.lis)
            else:
                dir_path = QtWidgets.QFileDialog.getExistingDirectory(caption="Choose directory to save results", directory=os.getcwd())
                
                '''create an excel file for the detailed network impact score results'''
                if globals.nis == True:
                    excel_filename = os.path.join(dir_path, 'Network_score_details.xlsx')
                    globals.nis_workbook = xlsxwriter.Workbook(excel_filename, {'tmpdir': os.path.join(os.getcwd(), os.pardir)})
                
                '''create an excel file for the results'''
                globals.results_excel = os.path.join(dir_path, 'Results.xlsx')
                globals.results_workbook = Workbook()
                results_page = globals.results_workbook.active
                
                images=[]
                location_scores=[]
                network_scores=[]
                region_names=[]
                size = len(array)
                
                '''show progress bar'''
                self.progress.show()
                
                '''save scores from multiple files and show results if only one file is uploaded'''
                for i in range(0, size):                    
                    self.handle_progress(i, size)
                    
                    head, name = ntpath.split(array[i])
                    print("FILES", name)
                    images.append(name)                    
                    
                    if globals.lis == True and globals.nis == False:
                        location_riskScore = location_score(globals.images_array_data[i], images[i])
                        location_scores.append(location_riskScore)
                        
                        isFinished = self.write_to_results(results_page, globals.lis, globals.nis, images, location_impact_score=location_scores)
                        if location_riskScore == None:
                            isFinished = False
                            show_result = ""
                        else:
                            show_result = images[0] + "\t"+"\t" + "The location score is: " + str(location_scores[0])
                        
                    elif globals.lis == False and globals.nis == True:
                        network_riskScore, maxRegionName = network_score(globals.images_array_data[i], images[i], globals.nis_workbook)
                        network_scores.append(network_riskScore)
                        region_names.append(maxRegionName)
                        
                        isFinished = self.write_to_results(results_page, globals.lis, globals.nis, images, network_impact_score=network_scores)
                        if network_riskScore == None:
                            isFinished = False
                            show_result = ""
                        else:
                            show_result = images[0] + "\t"+"\t" + "The network score is: "+ str(network_scores[0]) \
                                                + " (" + str(region_names[0]) + ")."
                    
                    elif globals.lis == True and globals.nis == True:
                        location_riskScore = location_score(globals.images_array_data[i], images[i])
                        location_scores.append(location_riskScore)
                        network_riskScore, maxRegionName = network_score(globals.images_array_data[i], images[i], globals.nis_workbook)
                        network_scores.append(network_riskScore)
                        region_names.append(maxRegionName)
                        
                        isFinished = self.write_to_results(results_page, globals.lis, globals.nis, images, location_impact_score=location_scores, network_impact_score=network_scores)
                        if location_riskScore == None or network_riskScore == None:
                            isFinished = False
                            show_result = ""
                        else:
                            show_result = images[0] + "\t"+"\t" + "The location score is: " + str(location_scores[0]) \
                                                + "\t"+"\t" + "The network score is: " + str(network_scores[0]) \
                                                + " (" + str(region_names[0]) + ")."
                        
                    else:                    
                        show_result = ""
                        self.handle_progress(i=0, size=0)
                        
                try:
                    self.results.setText(show_result)
                except:
                    '''no files selected'''
                    self.warning_message(size, globals.nis, globals.lis, excel_filename=0)            
                else:
                    '''show results from multiple files at once'''
                    if size > 1:
                        show_result = ""
                        if globals.lis == True and globals.nis == False:
                            for j in range(0, size):            
                                show_result = show_result + "\n" + images[j] + "\t"+"\t" + "The location score is: " + str(location_scores[j])
                                
                        elif globals.lis == False and globals.nis == True:
                            for j in range(0, size):            
                                show_result = show_result + "\n" + images[j] + "\t"+"\t" + "The network score is: " + str(network_scores[j]) \
                                                        + " (" + str(region_names[j]) + ")."
                        
                        elif globals.lis == True and globals.nis == True:
                            for j in range(0, size):            
                                show_result = show_result + "\n" + images[j] + "\t"+"\t" + "The location score is: " + str(location_scores[j]) \
                                                                            + "\t"+"\t" + "The network score is: " + str(network_scores[j]) \
                                                                            + " (" + str(region_names[j]) + ")."
                        else:
                            show_result = ""
                                
                        self.results.setText(show_result)
                        
                    if show_result != "":
                        self.table.setText("\u2022 Location impact score of the 5-point scale and correspondence with the voxel-wise risk coefficient (ln(OR)*):\n" \
                                           +"scale 1 --> score range –1.25 to 0.25\n" \
                                           +"scale 2 --> score range 0.25 to 0.54\n" \
                                           +"scale 3 --> score range 0.54 to 0.83\n" \
                                           +"scale 4 --> score range 0.83 to 1.2\n" \
                                           +"scale 5 --> score range 1.22 to 2.44\n\n" \
                                           +"* odds ratio\n" \
                                           +"Note: highest scores indicate increased probabilities for post-stroke cognitive impairement" \
                                           +"\n\n\n\u2022 If the Network impact score is Undefined, the infarct does not overlap with any of the AAL regions,\n" \
                                           +"meaning that the patient has an isolated white matter or infratentorial infarct." \
                                           +"\n\n\n\u2022 If any score is None, try using another file with the same image dimensions as the atlases."
                                           )
                    
                    '''close the excel file'''
                    if globals.nis == True:
                        globals.nis_workbook.close()
                    globals.results_workbook.save(filename=globals.results_excel)
                    
                    '''show relevant messages'''
                    if isFinished == True:
                       self.warning_message(size, globals.nis, globals.lis, excel_filename=globals.results_excel, end=True)
                       
                    if globals.nis == True and isFinished == True:
                        self.warning_message(size, globals.nis, globals.lis, excel_filename)
    
                    elif globals.lis == False and globals.nis == False:
                        self.warning_message(size, globals.nis, globals.lis)
                                 
    
    
    def write_nis_to_file(workbook, filename, corrected_list, volume_name_list, impact_score,
                      network_impact_score, max_index_region_name, log_network_impact_score):
        
        '''write data to .xlsx'''
        worksheet = workbook.add_worksheet(filename)
        worksheet.write(0, 0, filename)
        worksheet.write(0, 1, "Impact Score")
        
        i = 0
        while i < len(corrected_list):
            worksheet.write(i + 1, 0, volume_name_list[ corrected_list[i] -1 ] )
            worksheet.write(i + 1, 1, impact_score[ corrected_list[i] -1 ])
            i += 1
        worksheet.write(i+1, 0, "Max Impact Score")
        worksheet.write(i+1, 1, network_impact_score)
        worksheet.write(i+2, 0, "Region Name")
        worksheet.write(i+2, 1, max_index_region_name)
        worksheet.write(i+3, 0, "Log10")
        worksheet.write(i+3, 1, log_network_impact_score)
        
    
    def write_to_results(self, file, lis, nis, fileNames, location_impact_score=[], network_impact_score=[]):
        maxRow = 1
        if globals.lis==True and globals.nis==False:
            file.cell(row=1, column=2, value="Location Impact Score")            
            for i in range(0, len(fileNames)):    
                file.cell(row=maxRow+i+1, column=1, value=fileNames[i])
                file.cell(row=maxRow+i+1, column=2, value=location_impact_score[i])
                
        elif globals.lis==False and globals.nis==True:
            file.cell(row=1, column=2, value="Network Impact Score")            
            for i in range(0, len(fileNames)):
                file.cell(row=maxRow+i+1, column=1, value=fileNames[i])
                file.cell(row=maxRow+i+1, column=2, value=network_impact_score[i])
                
        elif globals.lis==True and globals.nis==True:
            file.cell(row=1, column=2, value="Location Impact Score")
            file.cell(row=1, column=3, value="Network Impact Score")             
            for i in range(0, len(fileNames)):    
                file.cell(row=maxRow+i+1, column=1, value=fileNames[i])
                file.cell(row=maxRow+i+1, column=2, value=location_impact_score[i])
                file.cell(row=maxRow+i+1, column=3, value=network_impact_score[i])
        end = True
        return end
        
        
    def handle_progress(self, i, size): 
        '''update progress bar''' 
        if size > 0:
            percentage = int( (i+1)*100 / size )
        else:
            percentage = 0
        self.progress.setValue(percentage)
        QApplication.processEvents() 

    
    def warning_message(self, filesNum, nis, lis, excel_filename=0, shape=True, fileName=0, binary=True, end=False):
        global results_excel
        
        msg = QMessageBox()
        
        if end == True and excel_filename == globals.results_excel:
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Results")
            msg.setText("The results are saved in: " + os.path.realpath(excel_filename))
        
        elif binary == False and fileName != 0:
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("Error")
            msg.setText(fileName + " is not binary!")
            
        elif filesNum == 0:
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning")
            msg.setText("Please select your infarct files to proceed")
        
        elif globals.nis == False and globals.lis == False:
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning")
            msg.setText("Please select a score to proceed")        
        
        elif globals.nis == True and excel_filename != 0:
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Network Impact Score")
            msg.setText("The detailed results on the network impact score are saved in: " + os.path.realpath(excel_filename))
            
        elif shape == False and fileName != 0:
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("Error")
            msg.setText(fileName + " is not of size (182, 218, 182).")     

        msg.exec_()
        


if __name__ == "__main__":
    import sys
    
    import globals
    globals.initialize()
    
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

